#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>
#include <ctime>

using namespace std;

void bfs(int start, vector<vector<int>>& arr, vector<int>& visit) {
    queue<int> q;
    q.push(start);
    visit[start] = 1;

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        cout << current << " ";

        #pragma omp parallel for
        for (int i = 0; i < arr[current].size(); i++) {
            if (arr[current][i] == 1 && visit[i] == 0) {
                visit[i] = 1;
                q.push(i);
            }
        }
    }
}

void dfs(int start, vector<vector<int>>& arr, vector<int>& visit) {
    stack<int> s;
    s.push(start);
    visit[start] = 1;

    while (!s.empty()) {
        int current = s.top();
        s.pop();
        cout << current << " ";

        #pragma omp parallel for
        for (int i = 0; i < arr[current].size(); i++) {
            if (arr[current][i] == 1 && visit[i] == 0) {
                visit[i] = 1;
                s.push(i);
            }
        }
    }
}

int main() {
    int n, edges;
    cout << "Enter the number of vertices: ";
    cin >> n;

    vector<vector<int>> arr(n, vector<int>(n, 0));
    vector<int> visit(n, 0);

    cout << "Enter the number of edges: ";
    cin >> edges;

    for (int j = 0; j < edges; j++) {
        int a, b;
        cout << "Enter the two edges:" << endl;
        cin >> a >> b;
        arr[a][b] = 1;
        arr[b][a] = 1;
    }

    int start;
    cout << "Enter the start vertex for BFS: ";
    cin >> start;

    clock_t start_time_bfs = clock(); // Start timing for BFS
    cout << "BFS traversal: ";
    bfs(start, arr, visit);
    cout << endl;
    clock_t end_time_bfs = clock(); // End timing for BFS

    fill(visit.begin(), visit.end(), 0); // Reset visit array for DFS

    cout << "Enter the start vertex for DFS: ";
    cin >> start;

    clock_t start_time_dfs = clock(); // Start timing for DFS
    cout << "DFS traversal: ";
    dfs(start, arr, visit);
    cout << endl;
    clock_t end_time_dfs = clock(); // End timing for DFS

    double elapsed_time_bfs = double(end_time_bfs - start_time_bfs) / CLOCKS_PER_SEC;
    double elapsed_time_dfs = double(end_time_dfs - start_time_dfs) / CLOCKS_PER_SEC;

    cout << "\nElapsed time for BFS: " << elapsed_time_bfs << " seconds." << endl;
    cout << "Elapsed time for DFS: " << elapsed_time_dfs << " seconds." << endl;

    return 0;
}
